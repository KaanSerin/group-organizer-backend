// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int                   @id @default(autoincrement())
  email       String                @unique
  username    String                @unique
  password    String
  createdAt   DateTime              @default(now()) @map("created_at")
  updatedAt   DateTime              @updatedAt @map("updated_at")
  role        UserRoleType          @relation(fields: [roleId], references: [id])
  roleId      Int                   @map("role_id")
  groups      UserGroup[]
  events      UserGroupEvent[]
  pollOptions UserGroupPollOption[]

  @@map("users")
}

model UserRoleType {
  id        Int      @id @default(autoincrement())
  name      String
  isAdmin   Boolean  @default(false) @map("is_admin")
  isTest    Boolean  @default(false) @map("is_test")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  users     User[]

  @@map("user_role_types")
}

model Group {
  id              Int              @id @default(autoincrement())
  name            String
  isActive        Boolean          @default(true) @map("is_active")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  users           UserGroup[]
  groupEvents     GroupEvent[]
  usergroupEvents UserGroupEvent[]
  groupPolls      GroupPoll[]

  @@map("groups")
}

model GroupRoleType {
  id        Int      @id @default(autoincrement())
  name      String
  isAdmin   Boolean  @default(false) @map("is_admin")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("group_role_types")
}

model UserGroup {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  groupId   Int      @map("group_id")
  userRole  String   @map("user_role")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])

  @@map("user_groups")
}

model GroupEvent {
  id        Int              @id @default(autoincrement())
  name      String
  groupId   Int              @map("group_id")
  isActive  Boolean          @default(true) @map("is_active")
  eventDate DateTime         @map("event_date")
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  group     Group            @relation(fields: [groupId], references: [id])
  users     UserGroupEvent[]

  @@map("group_events")
}

model UserGroupEvent {
  id         Int        @id @default(autoincrement())
  userId     Int        @map("user_id")
  groupId    Int        @map("group_id")
  eventId    Int        @map("event_id")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  user       User       @relation(fields: [userId], references: [id])
  group      Group      @relation(fields: [groupId], references: [id])
  groupEvent GroupEvent @relation(fields: [eventId], references: [id])

  @@map("user_group_events")
}

model GroupPoll {
  id        Int               @id @default(autoincrement())
  name      String
  groupId   Int               @map("group_id")
  isActive  Boolean           @default(true) @map("is_active")
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime          @updatedAt @map("updated_at")
  group     Group             @relation(fields: [groupId], references: [id])
  options   GroupPollOption[]

  @@map("group_polls")
}

model GroupPollOption {
  id          Int                   @id @default(autoincrement())
  name        String
  pollId      Int                   @map("poll_id")
  noVotes     Int                   @default(0) @map("no_votes")
  createdAt   DateTime              @default(now()) @map("created_at")
  updatedAt   DateTime              @updatedAt @map("updated_at")
  poll        GroupPoll             @relation(fields: [pollId], references: [id])
  userOptions UserGroupPollOption[]

  @@map("group_poll_options")
}

model UserGroupPollOption {
  id              Int             @id @default(autoincrement())
  userId          Int             @map("user_id")
  pollOptionId    Int             @map("poll_option_id")
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  user            User            @relation(fields: [userId], references: [id])
  groupPollOption GroupPollOption @relation(fields: [pollOptionId], references: [id])

  @@map("user_group_poll_options")
}
