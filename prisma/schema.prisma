// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int              @id @default(autoincrement())
  email     String           @unique
  username  String           @unique
  password  String
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  role      UserRole         @relation(fields: [roleId], references: [id])
  roleId    Int              @map("role_id")
  groups    UserGroup[]
  events    UserGroupEvent[]

  @@map("users")
}

model UserRole {
  id        Int      @id @default(autoincrement())
  name      String
  isAdmin   Boolean  @default(false) @map("is_admin")
  isTest    Boolean  @default(false) @map("is_test")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  users     User[]

  @@map("user_roles")
}

model Group {
  id             Int              @id @default(autoincrement())
  name           String
  isActive       Boolean          @default(true) @map("is_active")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  users          UserGroup[]
  GroupEvent     GroupEvent[]
  UserGroupEvent UserGroupEvent[]

  @@map("groups")
}

model UserGroup {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  groupId   Int      @map("group_id")
  userRole  String   @map("user_role")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  User      User     @relation(fields: [userId], references: [id])
  Group     Group    @relation(fields: [groupId], references: [id])

  @@map("user_groups")
}

model GroupEvent {
  id        Int              @id @default(autoincrement())
  name      String
  groupId   Int              @map("group_id")
  isActive  Boolean          @default(true) @map("is_active")
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  group     Group            @relation(fields: [groupId], references: [id])
  users     UserGroupEvent[]

  @@map("group_events")
}

model UserGroupEvent {
  id         Int        @id @default(autoincrement())
  userId     Int        @map("user_id")
  groupId    Int        @map("group_id")
  eventId    Int        @map("event_id")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  User       User       @relation(fields: [userId], references: [id])
  Group      Group      @relation(fields: [groupId], references: [id])
  GroupEvent GroupEvent @relation(fields: [eventId], references: [id])

  @@map("user_group_events")
}
